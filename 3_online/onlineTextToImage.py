# -*- coding: utf-8 -*-
"""onlineTextToImage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wN6qbrHgDq5gzNIDfRL7mnTLAL0r1Xr_

# Text to image generator online
By: Ashutosh K

## Setup

1. Get access token from huggingface.co
2. Save it in colab secrets with value as `HF_TOKEN`
3. Get auth token from ngrok
4. Save it in colab secrets with value as `NGROK_FANPLAY`

## Run
1. Run code by `Runtime > Run all`

2. Go to last cell and click on the link. Once redirected, click on `Visit Site`
"""

!pip install flask
!pip install pyngrok
!pip install diffusers

import os
from google.colab import userdata
ngrok_auth_token = userdata.get('NGROK_FANPLAY')
os.environ['NGROK_FANPLAY'] = ngrok_auth_token

!ngrok authtoken ${NGROK_FANPLAY}

!mkdir templates
!mkdir static

html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text to Image Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        p {
            text-align: center;
            color: #333;
        }

        form {
            text-align: center;
        }

        input[type="text"] {
            width: 80%;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 16px;
        }

        input[type="submit"] {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
        }

        input[type="submit"]:hover {
            background-color: #0056b3;
        }

        .generated-image {
            max-width: 512px;
            max-height: 512px;
            display: block;
            margin: 20px auto;
        }
    </style>
    <script>
        function showPleaseWaitMessage() {
            var messageH6 = document.getElementById("wait-message");
            messageH6.innerText = "Please wait, this may take up to 5 minutes...";
            document.getElementById("generate-button").disabled = true;
        }
        function enableGenerateButton() {
            document.getElementById("generate-button").disabled = false;
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>Text to Image Generator</h1>
        <form method="POST" action="/" onsubmit="showPleaseWaitMessage()">
            <label for="prompt">Enter your prompt:</label><br>
            <input type="text" id="prompt" name="prompt" value="photo of Virat Kholi in a suit"><br><br>
            <input type="submit" id="generate-button" value="Generate Image">
            <h6 id="wait-message"></h6>
        </form>
        {% if image_path %}
            <h2>Generated Image:</h2>
            <img class="generated-image" src="{{ image_path }}" alt="Generated Image" onload="enableGenerateButton()">
        {% endif %}
    </div>
</body>
</html>

"""

with open('templates/index.html', 'w') as f:
    f.write(html_content)

print("index.html created successfully!")

html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text to Image Generator</title>
</head>
<body>
    <h1>Error</h1>
</body>
</html>
"""

with open('templates/error.html', 'w') as f:
    f.write(html_content)

print("error.html created successfully!")

from diffusers import DiffusionPipeline
import torch
from PIL import Image

prj_path = "KarAshutosh/ViratKholi"
model = "stabilityai/stable-diffusion-xl-base-1.0"

pipe = DiffusionPipeline.from_pretrained(
    "stabilityai/stable-diffusion-xl-base-1.0",
    torch_dtype=torch.float16
)
pipe.to("cuda")
pipe.load_lora_weights(prj_path, weight_name="pytorch_lora_weights.safetensors")

torch.cuda.empty_cache()

import os
import threading
import torch
from flask import Flask, request, render_template
from pyngrok import ngrok

app = Flask(__name__)
port = "5000"

public_url = ngrok.connect(port).public_url
print(public_url)

app.config["BASE_URL"] = public_url

@app.route("/", methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        try:
            prompt = request.form['prompt']

            seed = 42
            generator = torch.Generator("cuda").manual_seed(seed)
            image = pipe(prompt=prompt, generator=generator).images[0]

            image_path = f"static/generated_image.png"
            image.save(image_path)

            return render_template('index.html', image_path=image_path)

        except Exception as e:
            print(f"Error: {str(e)}")
            return render_template('error.html')

    return render_template('index.html', image_path=None)

threading.Thread(target=app.run, kwargs={"use_reloader": False}).start()

#######################################################
### Uncomment the following to just generate images ###
#######################################################

# from IPython.display import display

# prompt = "photo of Virat Kholi in a suit"

# seed = 42
# generator = torch.Generator("cuda").manual_seed(seed)
# image = pipe(prompt=prompt, generator=generator).images[0]

# display(image)
# # image.save("image_file_name.png")
